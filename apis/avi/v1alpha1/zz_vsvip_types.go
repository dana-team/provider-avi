/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSInfoCnameInitParameters struct {

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type DNSInfoCnameObservation struct {

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type DNSInfoCnameParameters struct {

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Cname *string `json:"cname" tf:"cname,omitempty"`
}

type IpamSelectorInitParameters struct {
	Labels []IpamSelectorLabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpamSelectorLabelsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorLabelsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorLabelsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorObservation struct {
	Labels []IpamSelectorLabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpamSelectorParameters struct {

	// +kubebuilder:validation:Optional
	Labels []IpamSelectorLabelsParameters `json:"labels" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipDiscoveredNetworksSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipDiscoveredNetworksSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipDiscoveredNetworksSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipDiscoveredNetworksSubnet6InitParameters struct {
	IPAddr []VipDiscoveredNetworksSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipDiscoveredNetworksSubnet6Observation struct {
	IPAddr []VipDiscoveredNetworksSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipDiscoveredNetworksSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipDiscoveredNetworksSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipFloatingIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipFloatingIp6InitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIp6Observation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIp6Parameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipIpamNetworkSubnetSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipIpamNetworkSubnetSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipIpamNetworkSubnetSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipIpamNetworkSubnetSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VipIpamNetworkSubnetSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VipIpamNetworkSubnetSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6InitParameters struct {
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnet6Observation struct {
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetInitParameters struct {
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetObservation struct {
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6InitParameters struct {
	IPAddr []VipPlacementNetworksSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6Observation struct {
	IPAddr []VipPlacementNetworksSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipPlacementNetworksSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnetInitParameters struct {
	IPAddr []VipPlacementNetworksSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnetObservation struct {
	IPAddr []VipPlacementNetworksSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipPlacementNetworksSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsVipConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsVipConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsVipConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsVipDNSInfoInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Cname []DNSInfoCnameInitParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipDNSInfoObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Cname []DNSInfoCnameObservation `json:"cname,omitempty" tf:"cname,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipDNSInfoParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Cname []DNSInfoCnameParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipInitParameters struct {

	// Local_pref to be used for vsvip advertised. Applicable only over ibgp. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPLocalPreference *string `json:"bgpLocalPreference,omitempty" tf:"bgp_local_preference,omitempty"`

	// Number of times the local as should be prepended additionally to vsvip. Applicable only over ebgp. Allowed values are 1-10. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPNumAsPathPrepend *string `json:"bgpNumAsPathPrepend,omitempty" tf:"bgp_num_as_path_prepend,omitempty"`

	// Select bgp peers, using peer label, for vsvip advertisement. Field introduced in 20.1.5. Maximum of 128 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	// It is a reference to an object of type cloud. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// Protobuf versioning for config pbs. Field introduced in 21.1.1. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	ConfigpbAttributes []VsVipConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record. This takes effect only if dns profile isassociated with cloud. Field introduced in 17.1.1. Maximum of 1000 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	DNSInfo []VsVipDNSInfoInitParameters `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	// Force placement on all service engines in the service engine group (container clouds only). Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials edition(allowed values- false), basic edition(allowed values- false), enterprise with cloud services edition.
	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	// Determines the set of ipam networks to use for this vsvip. Selector type must be selector_ipam and only one label is supported. Field introduced in 20.1.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	IpamSelector []IpamSelectorInitParameters `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	// List of labels to be used for granular rbac. Field introduced in 20.1.5. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	Markers []VsVipMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// It is a reference to an object of type tenant. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// This sets the placement scope of virtualservice to given tier1 logical router in nsx-t. Field introduced in 20.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// This overrides the cloud level default and needs to match the se group value in which it will be used if the se group use_standard_alb value is set. This is only used when fip is used for vs on azure cloud. Field introduced in 18.2.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Vip []VsVipVipInitParameters `json:"vip,omitempty" tf:"vip,omitempty"`

	// Virtual routing context that the virtual service is bound to. This is used to provide the isolation of the set of networks the application is attached to. It is a reference to an object of type vrfcontext. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	// Checksum of cloud configuration for vsvip. Internally set by cloud connector. Field introduced in 17.2.9, 18.1.2. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsVipMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsVipMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsVipMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsVipObservation struct {

	// Local_pref to be used for vsvip advertised. Applicable only over ibgp. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPLocalPreference *string `json:"bgpLocalPreference,omitempty" tf:"bgp_local_preference,omitempty"`

	// Number of times the local as should be prepended additionally to vsvip. Applicable only over ebgp. Allowed values are 1-10. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPNumAsPathPrepend *string `json:"bgpNumAsPathPrepend,omitempty" tf:"bgp_num_as_path_prepend,omitempty"`

	// Select bgp peers, using peer label, for vsvip advertisement. Field introduced in 20.1.5. Maximum of 128 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	// It is a reference to an object of type cloud. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// Protobuf versioning for config pbs. Field introduced in 21.1.1. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	ConfigpbAttributes []VsVipConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record. This takes effect only if dns profile isassociated with cloud. Field introduced in 17.1.1. Maximum of 1000 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	DNSInfo []VsVipDNSInfoObservation `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	// Force placement on all service engines in the service engine group (container clouds only). Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials edition(allowed values- false), basic edition(allowed values- false), enterprise with cloud services edition.
	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines the set of ipam networks to use for this vsvip. Selector type must be selector_ipam and only one label is supported. Field introduced in 20.1.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	IpamSelector []IpamSelectorObservation `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	// List of labels to be used for granular rbac. Field introduced in 20.1.5. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	Markers []VsVipMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// It is a reference to an object of type tenant. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// This sets the placement scope of virtualservice to given tier1 logical router in nsx-t. Field introduced in 20.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// This overrides the cloud level default and needs to match the se group value in which it will be used if the se group use_standard_alb value is set. This is only used when fip is used for vs on azure cloud. Field introduced in 18.2.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Vip []VsVipVipObservation `json:"vip,omitempty" tf:"vip,omitempty"`

	// Virtual routing context that the virtual service is bound to. This is used to provide the isolation of the set of networks the application is attached to. It is a reference to an object of type vrfcontext. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	// Checksum of cloud configuration for vsvip. Internally set by cloud connector. Field introduced in 17.2.9, 18.1.2. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsVipParameters struct {

	// Local_pref to be used for vsvip advertised. Applicable only over ibgp. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	BGPLocalPreference *string `json:"bgpLocalPreference,omitempty" tf:"bgp_local_preference,omitempty"`

	// Number of times the local as should be prepended additionally to vsvip. Applicable only over ebgp. Allowed values are 1-10. Field introduced in 30.2.1. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	BGPNumAsPathPrepend *string `json:"bgpNumAsPathPrepend,omitempty" tf:"bgp_num_as_path_prepend,omitempty"`

	// Select bgp peers, using peer label, for vsvip advertisement. Field introduced in 20.1.5. Maximum of 128 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	// It is a reference to an object of type cloud. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// Protobuf versioning for config pbs. Field introduced in 21.1.1. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	ConfigpbAttributes []VsVipConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record. This takes effect only if dns profile isassociated with cloud. Field introduced in 17.1.1. Maximum of 1000 items allowed. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	DNSInfo []VsVipDNSInfoParameters `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	// Force placement on all service engines in the service engine group (container clouds only). Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials edition(allowed values- false), basic edition(allowed values- false), enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	// Determines the set of ipam networks to use for this vsvip. Selector type must be selector_ipam and only one label is supported. Field introduced in 20.1.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	IpamSelector []IpamSelectorParameters `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	// List of labels to be used for granular rbac. Field introduced in 20.1.5. Allowed in enterprise edition with any value, essentials edition with any value, basic edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Markers []VsVipMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// Name for the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// It is a reference to an object of type tenant. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// This sets the placement scope of virtualservice to given tier1 logical router in nsx-t. Field introduced in 20.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// This overrides the cloud level default and needs to match the se group value in which it will be used if the se group use_standard_alb value is set. This is only used when fip is used for vs on azure cloud. Field introduced in 18.2.3. Allowed in enterprise edition with any value, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Vip []VsVipVipParameters `json:"vip,omitempty" tf:"vip,omitempty"`

	// Virtual routing context that the virtual service is bound to. This is used to provide the isolation of the set of networks the application is attached to. It is a reference to an object of type vrfcontext. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	// Checksum of cloud configuration for vsvip. Internally set by cloud connector. Field introduced in 17.2.9, 18.1.2. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsVipVipDiscoveredNetworksInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsVipVipDiscoveredNetworksSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipDiscoveredNetworksSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipDiscoveredNetworksObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsVipVipDiscoveredNetworksSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipDiscoveredNetworksSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipDiscoveredNetworksParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VsVipVipDiscoveredNetworksSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VipDiscoveredNetworksSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetInitParameters struct {
	IPAddr []VsVipVipDiscoveredNetworksSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetObservation struct {
	IPAddr []VsVipVipDiscoveredNetworksSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipDiscoveredNetworksSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsVipVipDiscoveredNetworksSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsVipVipIPAddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipIPAddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsVipVipInitParameters struct {
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	DiscoveredNetworks []VsVipVipDiscoveredNetworksInitParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FloatingIP []VipFloatingIPInitParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	FloatingIp6 []VipFloatingIp6InitParameters `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	IPAddress []VsVipVipIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []VsVipVipIp6AddressInitParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	IpamNetworkSubnet []VipIpamNetworkSubnetInitParameters `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	PlacementNetworks []VsVipVipPlacementNetworksInitParameters `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	Subnet []VsVipVipSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsVipVipSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`
}

type VsVipVipIp6AddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipIp6AddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipIp6AddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsVipVipObservation struct {
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	DiscoveredNetworks []VsVipVipDiscoveredNetworksObservation `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FloatingIP []VipFloatingIPObservation `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	FloatingIp6 []VipFloatingIp6Observation `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	IPAddress []VsVipVipIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []VsVipVipIp6AddressObservation `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	IpamNetworkSubnet []VipIpamNetworkSubnetObservation `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	PlacementNetworks []VsVipVipPlacementNetworksObservation `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	Subnet []VsVipVipSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsVipVipSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`
}

type VsVipVipParameters struct {

	// +kubebuilder:validation:Optional
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	// +kubebuilder:validation:Optional
	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	// +kubebuilder:validation:Optional
	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	// List of virtual service ips and other shareable entities. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	// +kubebuilder:validation:Optional
	DiscoveredNetworks []VsVipVipDiscoveredNetworksParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIP []VipFloatingIPParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIp6 []VipFloatingIp6Parameters `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress []VsVipVipIPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6Address []VsVipVipIp6AddressParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	// +kubebuilder:validation:Optional
	IpamNetworkSubnet []VipIpamNetworkSubnetParameters `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	PlacementNetworks []VsVipVipPlacementNetworksParameters `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VsVipVipSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VsVipVipSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// Uuid of the vsvip object. Field introduced in 17.1.1. Allowed in enterprise edition with any value, essentials, basic, enterprise with cloud services edition.
	// +kubebuilder:validation:Optional
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VipID *string `json:"vipId" tf:"vip_id,omitempty"`
}

type VsVipVipPlacementNetworksInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipPlacementNetworksSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipPlacementNetworksSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipPlacementNetworksObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipPlacementNetworksSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipPlacementNetworksSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipPlacementNetworksParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VipPlacementNetworksSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VipPlacementNetworksSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsVipVipSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsVipVipSubnet6InitParameters struct {
	IPAddr []VsVipVipSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipSubnet6Observation struct {
	IPAddr []VsVipVipSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsVipVipSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsVipVipSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsVipVipSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsVipVipSubnetInitParameters struct {
	IPAddr []VsVipVipSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipSubnetObservation struct {
	IPAddr []VsVipVipSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsVipVipSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsVipVipSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

// VsVipSpec defines the desired state of VsVip
type VsVipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VsVipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VsVipInitParameters `json:"initProvider,omitempty"`
}

// VsVipStatus defines the observed state of VsVip.
type VsVipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VsVipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VsVip is the Schema for the VsVips API. Creates and manages Avi VsVip.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type VsVip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VsVipSpec   `json:"spec"`
	Status VsVipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VsVipList contains a list of VsVips
type VsVipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VsVip `json:"items"`
}

// Repository type metadata.
var (
	VsVip_Kind             = "VsVip"
	VsVip_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VsVip_Kind}.String()
	VsVip_KindAPIVersion   = VsVip_Kind + "." + CRDGroupVersion.String()
	VsVip_GroupVersionKind = CRDGroupVersion.WithKind(VsVip_Kind)
)

func init() {
	SchemeBuilder.Register(&VsVip{}, &VsVipList{})
}
